;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice $to, int $value, int $mode, cell $code, cell $data, cell $body) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: CBet
;; Header: 0xb83a622c
;; TLB: c_bet#b83a622c turtleNumber:uint32 = CBet
;;

(slice, ((int))) $CBet$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3090833964);
    var v'turtleNumber = sc_0~load_uint(32);
    return (sc_0, (v'turtleNumber));
}

;;
;; Type: Bet
;; Header: 0xa2753ed4
;; TLB: bet#a2753ed4 turtleNumber:uint32 address:address = Bet
;;

builder $Bet$_store(builder build_0, (int, slice) v) inline {
    var (v'turtleNumber, v'address) = v;
    build_0 = store_uint(build_0, 2725592788, 32);
    build_0 = build_0.store_uint(v'turtleNumber, 32);
    build_0 = __tact_store_address(build_0, v'address);
    return build_0;
}

cell $Bet$_store_cell((int, slice) v) inline {
    return $Bet$_store(begin_cell(), v).end_cell();
}

((int, slice)) $Bet$_constructor_address_turtleNumber(slice $address, int $turtleNumber) inline {
    return ($turtleNumber, $address);
}

;;
;; Type: CPnl
;; Header: 0x0600703f
;; TLB: c_pnl#0600703f id:int257 = CPnl
;;

(slice, ((int))) $CPnl$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 100692031);
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

;;
;; Type: Pnl
;; Header: 0x2317a174
;; TLB: pnl#2317a174 id:int257 address:address = Pnl
;;

builder $Pnl$_store(builder build_0, (int, slice) v) inline {
    var (v'id, v'address) = v;
    build_0 = store_uint(build_0, 588751220, 32);
    build_0 = build_0.store_int(v'id, 257);
    build_0 = __tact_store_address(build_0, v'address);
    return build_0;
}

cell $Pnl$_store_cell((int, slice) v) inline {
    return $Pnl$_store(begin_cell(), v).end_cell();
}

((int, slice)) $Pnl$_constructor_id_address(int $id, slice $address) inline {
    return ($id, $address);
}

;;
;; Type: Withdraw
;; Header: 0x1bc3cf3b
;; TLB: withdraw#1bc3cf3b id:int257 = Withdraw
;;

builder $Withdraw$_store(builder build_0, (int) v) inline {
    var (v'id) = v;
    build_0 = store_uint(build_0, 465817403, 32);
    build_0 = build_0.store_int(v'id, 257);
    return build_0;
}

cell $Withdraw$_store_cell((int) v) inline {
    return $Withdraw$_store(begin_cell(), v).end_cell();
}

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 465817403);
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

;;
;; Type: All
;; Header: 0x4cf7d1d9
;; TLB: all#4cf7d1d9 amount:int257 = All
;;

(slice, ((int))) $All$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1291309529);
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

;;
;; Type: Turtle
;;

builder $Turtle$init$_store(builder build_0, (int) v) inline {
    var (v'id) = v;
    build_0 = build_0.store_int(v'id, 257);
    return build_0;
}

(cell, cell) $Turtle$_init_child(cell sys', int $id) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Turtle
    cell mine = __tact_dict_get_code(source, 37237);
    contracts = __tact_dict_set_code(contracts, 37237, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Turtle$init$_store(b, ($id));
    return (mine, b.end_cell());
}

;;
;; Type: ControlCenter
;;

builder $ControlCenter$_store(builder build_0, (int, slice) v) inline {
    var (v'fee, v'owner) = v;
    build_0 = build_0.store_int(v'fee, 257);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(slice, ((int, slice))) $ControlCenter$_load(slice sc_0) inline {
    var v'fee = sc_0~load_int(257);
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'fee, v'owner));
}

(int, slice) $ControlCenter$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ControlCenter$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $ControlCenter$_contract_init();
    }
}

() $ControlCenter$_contract_store((int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $ControlCenter$_store(b, v);
    set_data(b.end_cell());
}
;;
;; Header files for Turtle
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_min_int_cell
(int, cell, int) __tact_dict_min_int_cell(cell d, int kl) inline;

;; __tact_dict_next_int_cell
(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_float_to_string
slice __tact_float_to_string(int src, int digits) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Bet$_load
(slice, ((int, slice))) $Bet$_load(slice sc_0) inline;

;; $History$_store
builder $History$_store(builder build_0, (int, int, cell) v) inline;

;; $History$_store_cell
cell $History$_store_cell((int, int, cell) v) inline;

;; $History$_load
(slice, ((int, int, cell))) $History$_load(slice sc_0) inline;

;; $History$_as_optional
tuple $History$_as_optional((int, int, cell) v) inline;

;; $History$_load_opt
tuple $History$_load_opt(cell cl) inline;

;; $Pnl$_load
(slice, ((int, slice))) $Pnl$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $Turtle$_store
builder $Turtle$_store(builder build_0, (int, int, cell, slice, int, int, int) v) inline;

;; $Turtle$_load
(slice, ((int, int, cell, slice, int, int, int))) $Turtle$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Status$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $Status$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline;

;; $History$_not_null
((int, int, cell)) $History$_not_null(tuple v) inline;

;; $Turtle$init$_load
(slice, ((int))) $Turtle$init$_load(slice sc_0) inline;

;; $History$_constructor_number_total_data
((int, int, cell)) $History$_constructor_number_total_data(int $number, int $total, cell $data) inline;

;; $Turtle$_contract_init
(int, int, cell, slice, int, int, int) $Turtle$_contract_init(int $id) impure inline_ref;

;; $Turtle$_contract_load
(int, int, cell, slice, int, int, int) $Turtle$_contract_load() impure inline_ref;

;; $Turtle$_contract_store
() $Turtle$_contract_store((int, int, cell, slice, int, int, int) v) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Int$_fun_toCoinsString
slice $Int$_fun_toCoinsString(int $self) impure inline;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $Turtle$_fun_total
((int, int, cell, slice, int, int, int), int) $Turtle$_fun_total((int, int, cell, slice, int, int, int) $self) impure inline_ref;

;; $Status$_constructor_winner_total_totalMe_pnl_total1_me1_total2_me2_total3_me3_total4_me4_total5_me5_total6_me6_total7_me7_total8_me8_total9_me9_total10_me10_winnerRate_fee
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $Status$_constructor_winner_total_totalMe_pnl_total1_me1_total2_me2_total3_me3_total4_me4_total5_me5_total6_me6_total7_me7_total8_me8_total9_me9_total10_me10_winnerRate_fee(int $winner, int $total, int $totalMe, int $pnl, int $total1, int $me1, int $total2, int $me2, int $total3, int $me3, int $total4, int $me4, int $total5, int $me5, int $total6, int $me6, int $total7, int $me7, int $total8, int $me8, int $total9, int $me9, int $total10, int $me10, int $winnerRate, int $fee) inline;

;; $Turtle$_fun_data
((int, int, cell, slice, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $Turtle$_fun_data((int, int, cell, slice, int, int, int) $self, slice $key) impure inline_ref;

;; $Turtle$_fun_id
((int, int, cell, slice, int, int, int), int) $Turtle$_fun_id((int, int, cell, slice, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Turtle$_fun_forward
((int, int, cell, slice, int, int, int), ()) $Turtle$_fun_forward((int, int, cell, slice, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Turtle$_fun_notify
((int, int, cell, slice, int, int, int), ()) $Turtle$_fun_notify((int, int, cell, slice, int, int, int) $self, cell $body) impure inline;

;; $Turtle$_fun_requireOwner
((int, int, cell, slice, int, int, int), ()) $Turtle$_fun_requireOwner((int, int, cell, slice, int, int, int) $self) impure inline_ref;

;; $Turtle$_fun_owner
((int, int, cell, slice, int, int, int), slice) $Turtle$_fun_owner((int, int, cell, slice, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

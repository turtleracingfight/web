#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Turtle.headers.fc";
#include "tact_Turtle.stdlib.fc";
#include "tact_Turtle.storage.fc";

;;
;; Contract Turtle functions
;;

(int, int, cell, slice, int, int, int) $Turtle$_contract_init(int $id) impure inline_ref {
    var (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)) = (null(), 0, null(), null(), 0, 0, 0);
    $self'id = $id;
    $self'items = null();
    int $i = 1;
    $self'items = null();
    while (($i < 11)) {
        var ($empty'number, $empty'total, $empty'data) = $History$_constructor_number_total_data($i, 0, null());
        $self'items~__tact_dict_set_int_cell(257, $i, $History$_store_cell(($empty'number, $empty'total, $empty'data)));
        $i = ($i + 1);
    }
    $self'owner = __tact_context_get_sender();
    return ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee);
}

((int, int, cell, slice, int, int, int), int) $Turtle$_fun_total((int, int, cell, slice, int, int, int) $self) impure inline_ref {
    var (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)) = $self;
    var $fresh$ret_0 = $self'total;
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), $fresh$ret_0);
}

((int, int, cell, slice, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $Turtle$_fun_data((int, int, cell, slice, int, int, int) $self, slice $key) impure inline_ref {
    var (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)) = $self;
    var ($res'winner, $res'totalMe, $res'total, $res'winnerRate, $res'fee, $res'pnl, $res'total1, $res'me1, $res'total2, $res'me2, $res'total3, $res'me3, $res'total4, $res'me4, $res'total5, $res'me5, $res'total6, $res'me6, $res'total7, $res'me7, $res'total8, $res'me8, $res'total9, $res'me9, $res'total10, $res'me10) = $Status$_constructor_winner_total_totalMe_pnl_total1_me1_total2_me2_total3_me3_total4_me4_total5_me5_total6_me6_total7_me7_total8_me8_total9_me9_total10_me10_winnerRate_fee($self'winner, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $self'winnerRate, $self'fee);
    int $i = 1;
    while (($i < 11)) {
        var ($bet'number, $bet'total, $bet'data) = $History$_not_null($History$_load_opt(__tact_dict_get_int_cell($self'items, 257, $i)));
        int $me = __tact_dict_get_slice_int($bet'data, 267, $key, 257);
        if (($i == 1)) {
            $res'total1 = $bet'total;
        }
        if (($i == 2)) {
            $res'total2 = $bet'total;
        }
        if (($i == 3)) {
            $res'total3 = $bet'total;
        }
        if (($i == 4)) {
            $res'total4 = $bet'total;
        }
        if (($i == 5)) {
            $res'total5 = $bet'total;
        }
        if (($i == 6)) {
            $res'total6 = $bet'total;
        }
        if (($i == 7)) {
            $res'total7 = $bet'total;
        }
        if (($i == 8)) {
            $res'total8 = $bet'total;
        }
        if (($i == 9)) {
            $res'total9 = $bet'total;
        }
        if (($i == 10)) {
            $res'total10 = $bet'total;
        }
        if ((~ null?($me))) {
            if (($i == 1)) {
                $res'me1 = __tact_not_null($me);
            }
            if (($i == 2)) {
                $res'me2 = __tact_not_null($me);
            }
            if (($i == 3)) {
                $res'me3 = __tact_not_null($me);
            }
            if (($i == 4)) {
                $res'me4 = __tact_not_null($me);
            }
            if (($i == 5)) {
                $res'me5 = __tact_not_null($me);
            }
            if (($i == 6)) {
                $res'me6 = __tact_not_null($me);
            }
            if (($i == 7)) {
                $res'me7 = __tact_not_null($me);
            }
            if (($i == 8)) {
                $res'me8 = __tact_not_null($me);
            }
            if (($i == 9)) {
                $res'me9 = __tact_not_null($me);
            }
            if (($i == 10)) {
                $res'me10 = __tact_not_null($me);
            }
            $res'totalMe = ($res'totalMe + __tact_not_null($me));
            $res'total = ($res'total + $bet'total);
            if (($self'winner == $i)) {
                int $percent = (($bet'total / __tact_not_null($me)) * 100);
                int $total = (($self'total / 100) * 90);
                $res'pnl = (($total / 100) * $percent);
            }
        }
        $i = ($i + 1);
    }
    var $fresh$ret_1 = ($res'winner, $res'totalMe, $res'total, $res'winnerRate, $res'fee, $res'pnl, $res'total1, $res'me1, $res'total2, $res'me2, $res'total3, $res'me3, $res'total4, $res'me4, $res'total5, $res'me5, $res'total6, $res'me6, $res'total7, $res'me7, $res'total8, $res'me8, $res'total9, $res'me9, $res'total10, $res'me10);
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), $fresh$ret_1);
}

((int, int, cell, slice, int, int, int), int) $Turtle$_fun_id((int, int, cell, slice, int, int, int) $self) impure inline_ref {
    var (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)) = $self;
    var $fresh$ret_2 = $self'id;
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), $fresh$ret_2);
}

((int, int, cell, slice, int, int, int), ()) $Turtle$_fun_requireOwner((int, int, cell, slice, int, int, int) $self) impure inline_ref {
    var (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
}

((int, int, cell, slice, int, int, int), slice) $Turtle$_fun_owner((int, int, cell, slice, int, int, int) $self) impure inline_ref {
    var (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)) = $self;
    var $fresh$ret_3 = $self'owner;
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), $fresh$ret_3);
}

;;
;; Receivers of a Contract Turtle
;;

(((int, int, cell, slice, int, int, int)), ()) $Turtle$_internal_binary_Bet((int, int, cell, slice, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee) = $self;
    var ($msg'turtleNumber, $msg'address) = $msg;
    ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)~$Turtle$_fun_requireOwner();
    var ($bets'number, $bets'total, $bets'data) = $History$_not_null($History$_load_opt(__tact_dict_get_int_cell($self'items, 257, $msg'turtleNumber)));
    $bets'total = $bets'total + $Context$_get_value(__tact_context_get());
    if (null?(__tact_dict_get_slice_int($bets'data, 267, $msg'address, 257))) {
        $bets'data~__tact_dict_set_slice_int(267, $msg'address, 0, 257);
    }
    int $userBet = __tact_not_null(__tact_dict_get_slice_int($bets'data, 267, $msg'address, 257));
    $bets'data~__tact_dict_set_slice_int(267, $msg'address, ($userBet + $Context$_get_value(__tact_context_get())), 257);
    $self'items~__tact_dict_set_int_cell(257, $msg'turtleNumber, $History$_store_cell(($bets'number, $bets'total, $bets'data)));
    $self'total = $self'total + $Context$_get_value(__tact_context_get());
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
}

(((int, int, cell, slice, int, int, int)), ()) $Turtle$_internal_binary_Pnl((int, int, cell, slice, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee) = $self;
    var ($msg'id, $msg'address) = $msg;
    ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)~$Turtle$_fun_requireOwner();
    int $days = ($global_now() / 86400);
    throw_unless(18136, ($self'id <= $days));
    if (($self'winner == 0)) {
        int $winner = 0;
        int $min = 9223372036854775807;
        var ($key, $value, $fresh$flag_4) = __tact_dict_min_int_cell($self'items, 257);
        while ($fresh$flag_4) {
            var ($value'number, $value'total, $value'data) = $History$_not_null($History$_load_opt($value));
            if (( (($value'total < $min)) ? (($value'total != 0)) : (false) )) {
                $min = $value'total;
                $winner = $key;
            }
            ($key, $value, $fresh$flag_4) = __tact_dict_next_int_cell($self'items, 257, $key);
        }
        $self'winner = $winner;
        $self'winnerRate = $min;
        $self'fee = (($self'total / 100) * 10);
    }
    if (($self'winner == 0)) {
        return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
    }
    if (null?($History$_load_opt(__tact_dict_get_int_cell($self'items, 257, $self'winner)))) {
        return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
    }
    var ($wc'number, $wc'total, $wc'data) = $History$_not_null($History$_load_opt(__tact_dict_get_int_cell($self'items, 257, $self'winner)));
    if (null?(__tact_dict_get_slice_int($wc'data, 267, $msg'address, 257))) {
        return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
    }
    int $bet = __tact_not_null(__tact_dict_get_slice_int($wc'data, 267, $msg'address, 257));
    int $percent = ($bet / $self'winnerRate);
    int $total = ($self'total - $self'fee);
    int $pnl = (($total / 100) * $percent);
    $wc'data~__tact_dict_delete(267, $msg'address);
    $self'items~__tact_dict_set_int_cell(257, $self'winner, $History$_store_cell(($wc'number, $wc'total, $wc'data)));
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body($msg'address, true, $pnl, 64, $String$_fun_asComment($Int$_fun_toCoinsString($pnl))));
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
}

(((int, int, cell, slice, int, int, int)), ()) $Turtle$_internal_binary_Withdraw((int, int, cell, slice, int, int, int) $self, (int) $msg) impure inline {
    var ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee) = $self;
    var ($msg'id) = $msg;
    ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)~$Turtle$_fun_requireOwner();
    int $days = ($global_now() / 86400);
    throw_unless(18136, ($self'id < $days));
    if (($self'winner == 0)) {
        int $winner = 0;
        int $min = 9223372036854775807;
        var ($key, $value, $fresh$flag_5) = __tact_dict_min_int_cell($self'items, 257);
        while ($fresh$flag_5) {
            var ($value'number, $value'total, $value'data) = $History$_not_null($History$_load_opt($value));
            if (($value'total < $min)) {
                $min = $value'total;
                $winner = $key;
            }
            ($key, $value, $fresh$flag_5) = __tact_dict_next_int_cell($self'items, 257, $key);
        }
        $self'winner = $winner;
        $self'winnerRate = $min;
        $self'fee = (($self'total / 100) * 10);
    }
    if (($self'winner == 0)) {
        return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
    }
    int $total = $self'total;
    $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), $self'fee, 2, $String$_fun_asComment($Int$_fun_toCoinsString($self'fee))));
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
}

(((int, int, cell, slice, int, int, int)), ()) $Turtle$_internal_binary_Deploy((int, int, cell, slice, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee)~$Turtle$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, $self'total, $self'items, $self'owner, $self'winner, $self'winnerRate, $self'fee), ());
}

;;
;; Get methods of a Contract Turtle
;;

_ %total() method_id(100421) {
    var self = $Turtle$_contract_load();
    var res = self~$Turtle$_fun_total();
    return res;
}

_ %data(slice $key) method_id(100194) {
    slice $key = __tact_verify_address($key);
    var self = $Turtle$_contract_load();
    var res = self~$Turtle$_fun_data($key);
    return $Status$_to_external(res);
}

_ %id() method_id(105872) {
    var self = $Turtle$_contract_load();
    var res = self~$Turtle$_fun_id();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Turtle$_contract_load();
    var res = self~$Turtle$_fun_owner();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Turtle
;;

((int, int, cell, slice, int, int, int), int) $Turtle$_contract_router_internal((int, int, cell, slice, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Bet message
    if (op == 2725592788) {
        var msg = in_msg~$Bet$_load();
        self~$Turtle$_internal_binary_Bet(msg);
        return (self, true);
    }
    
    ;; Receive Pnl message
    if (op == 588751220) {
        var msg = in_msg~$Pnl$_load();
        self~$Turtle$_internal_binary_Pnl(msg);
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 465817403) {
        var msg = in_msg~$Withdraw$_load();
        self~$Turtle$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Turtle$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Turtle$_contract_load();
    
    ;; Handle operation
    int handled = self~$Turtle$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Turtle$_contract_store(self);
}

;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Status
;; TLB: _ winner:int257 totalMe:int257 total:int257 winnerRate:int257 fee:int257 pnl:int257 total1:int257 me1:int257 total2:int257 me2:int257 total3:int257 me3:int257 total4:int257 me4:int257 total5:int257 me5:int257 total6:int257 me6:int257 total7:int257 me7:int257 total8:int257 me8:int257 total9:int257 me9:int257 total10:int257 me10:int257 = Status
;;

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $Status$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline {
    var (v'winner, v'totalMe, v'total, v'winnerRate, v'fee, v'pnl, v'total1, v'me1, v'total2, v'me2, v'total3, v'me3, v'total4, v'me4, v'total5, v'me5, v'total6, v'me6, v'total7, v'me7, v'total8, v'me8, v'total9, v'me9, v'total10, v'me10) = v; 
    return (v'winner, v'totalMe, v'total, v'winnerRate, v'fee, v'pnl, v'total1, v'me1, v'total2, v'me2, v'total3, v'me3, v'total4, v'me4, v'total5, v'me5, v'total6, v'me6, v'total7, v'me7, v'total8, v'me8, v'total9, v'me9, v'total10, v'me10);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $Status$_constructor_winner_total_totalMe_pnl_total1_me1_total2_me2_total3_me3_total4_me4_total5_me5_total6_me6_total7_me7_total8_me8_total9_me9_total10_me10_winnerRate_fee(int $winner, int $total, int $totalMe, int $pnl, int $total1, int $me1, int $total2, int $me2, int $total3, int $me3, int $total4, int $me4, int $total5, int $me5, int $total6, int $me6, int $total7, int $me7, int $total8, int $me8, int $total9, int $me9, int $total10, int $me10, int $winnerRate, int $fee) inline {
    return ($winner, $totalMe, $total, $winnerRate, $fee, $pnl, $total1, $me1, $total2, $me2, $total3, $me3, $total4, $me4, $total5, $me5, $total6, $me6, $total7, $me7, $total8, $me8, $total9, $me9, $total10, $me10);
}

;;
;; Type: Bet
;; Header: 0xa2753ed4
;; TLB: bet#a2753ed4 turtleNumber:uint32 address:address = Bet
;;

(slice, ((int, slice))) $Bet$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2725592788);
    var v'turtleNumber = sc_0~load_uint(32);
    var v'address = sc_0~__tact_load_address();
    return (sc_0, (v'turtleNumber, v'address));
}

;;
;; Type: History
;; Header: 0x7b6653c9
;; TLB: history#7b6653c9 number:uint32 total:int257 data:dict<address, int> = History
;;

builder $History$_store(builder build_0, (int, int, cell) v) inline {
    var (v'number, v'total, v'data) = v;
    build_0 = store_uint(build_0, 2070303689, 32);
    build_0 = build_0.store_uint(v'number, 32);
    build_0 = build_0.store_int(v'total, 257);
    build_0 = build_0.store_dict(v'data);
    return build_0;
}

cell $History$_store_cell((int, int, cell) v) inline {
    return $History$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, cell))) $History$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2070303689);
    var v'number = sc_0~load_uint(32);
    var v'total = sc_0~load_int(257);
    var v'data = sc_0~load_dict();
    return (sc_0, (v'number, v'total, v'data));
}

tuple $History$_as_optional((int, int, cell) v) inline {
    var (v'number, v'total, v'data) = v;
    return __tact_tuple_create_3(v'number, v'total, v'data);
}

tuple $History$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $History$_as_optional(sc~$History$_load());
}

((int, int, cell)) $History$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'number, int vvv'total, cell vvv'data) = __tact_tuple_destroy_3(v);
    return (vvv'number, vvv'total, vvv'data);
}

((int, int, cell)) $History$_constructor_number_total_data(int $number, int $total, cell $data) inline {
    return ($number, $total, $data);
}

;;
;; Type: Pnl
;; Header: 0x2317a174
;; TLB: pnl#2317a174 id:int257 address:address = Pnl
;;

(slice, ((int, slice))) $Pnl$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 588751220);
    var v'id = sc_0~load_int(257);
    var v'address = sc_0~__tact_load_address();
    return (sc_0, (v'id, v'address));
}

;;
;; Type: Withdraw
;; Header: 0x1bc3cf3b
;; TLB: withdraw#1bc3cf3b id:int257 = Withdraw
;;

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 465817403);
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

;;
;; Type: Turtle
;;

builder $Turtle$_store(builder build_0, (int, int, cell, slice, int, int, int) v) inline {
    var (v'id, v'total, v'items, v'owner, v'winner, v'winnerRate, v'fee) = v;
    build_0 = build_0.store_int(v'id, 257);
    build_0 = build_0.store_int(v'total, 257);
    build_0 = build_0.store_dict(v'items);
    build_0 = __tact_store_address(build_0, v'owner);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'winner, 257);
    build_1 = build_1.store_int(v'winnerRate, 257);
    build_1 = build_1.store_int(v'fee, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, slice, int, int, int))) $Turtle$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    var v'total = sc_0~load_int(257);
    var v'items = sc_0~load_dict();
    var v'owner = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'winner = sc_1~load_int(257);
    var v'winnerRate = sc_1~load_int(257);
    var v'fee = sc_1~load_int(257);
    return (sc_0, (v'id, v'total, v'items, v'owner, v'winner, v'winnerRate, v'fee));
}

(slice, ((int))) $Turtle$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(int, int, cell, slice, int, int, int) $Turtle$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Turtle$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int $id) = $sc~$Turtle$init$_load();
        $sc.end_parse();
        return $Turtle$_contract_init($id);
    }
}

() $Turtle$_contract_store((int, int, cell, slice, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Turtle$_store(b, v);
    set_data(b.end_cell());
}